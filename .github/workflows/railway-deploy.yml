name: Deploy to Railway

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Generate Prisma client
      run: npx prisma generate
    
    - name: Run linting
      run: npm run lint
      continue-on-error: true
    
    - name: Run type checking
      run: npm run type-check
      continue-on-error: true
    
    - name: Build application
      run: npm run build:railway
      env:
        SKIP_ENV_VALIDATION: true
        NEXT_TELEMETRY_DISABLED: 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Railway CLI
      run: npm install -g @railway/cli
    
    - name: Deploy to Railway Staging
      run: railway up --detach --environment staging
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}
    
    - name: Wait for deployment
      run: sleep 30
    
    - name: Check deployment health
      run: |
        STAGING_URL=$(railway domain --environment staging)
        if [ ! -z "$STAGING_URL" ]; then
          curl -f "https://$STAGING_URL/api/health" || echo "Health check failed"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Railway CLI
      run: npm install -g @railway/cli
    
    - name: Deploy to Railway Production
      run: railway up --detach --environment production
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
    
    - name: Wait for deployment
      run: sleep 60
    
    - name: Check deployment health
      run: |
        PRODUCTION_URL=$(railway domain --environment production)
        if [ ! -z "$PRODUCTION_URL" ]; then
          curl -f "https://$PRODUCTION_URL/api/health" || echo "Health check failed"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment successful!"
        echo "Application is now live at your Railway domain"
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Please check the Railway logs for more details"
        exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Check for vulnerabilities
      run: |
        if npm audit --audit-level=critical; then
          echo "‚úÖ No critical vulnerabilities found"
        else
          echo "‚ö†Ô∏è Critical vulnerabilities detected"
          echo "Please run 'npm audit fix' to resolve issues"
        fi
"""Initial migration

Revision ID: b12c97b5b604
Revises: 
Create Date: 2025-05-12 18:05:38.200524

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b12c97b5b604'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('branch',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('isActive', sa.Boolean(), nullable=True),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=True),
    sa.Column('parentId', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['parentId'], ['branch.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_branch_code'), 'branch', ['code'], unique=True)
    op.create_index(op.f('ix_branch_id'), 'branch', ['id'], unique=False)
    op.create_table('organizationsettings',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('organizationId', sa.String(), nullable=False),
    sa.Column('validationRules', sa.JSON(), nullable=False),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_organizationsettings_id'), 'organizationsettings', ['id'], unique=False)
    op.create_index(op.f('ix_organizationsettings_organizationId'), 'organizationsettings', ['organizationId'], unique=True)
    op.create_table('role',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_role_id'), 'role', ['id'], unique=False)
    op.create_index(op.f('ix_role_name'), 'role', ['name'], unique=True)
    op.create_table('user',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('branchId', sa.String(), nullable=True),
    sa.Column('isActive', sa.Boolean(), nullable=True),
    sa.Column('lastLogin', sa.DateTime(), nullable=True),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=True),
    sa.Column('failedLoginAttempts', sa.Integer(), nullable=True),
    sa.Column('lockedUntil', sa.DateTime(timezone=True), nullable=True),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('preferences', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['branchId'], ['branch.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_branchId'), 'user', ['branchId'], unique=False)
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('activitylog',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.String(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('ipAddress', sa.String(), nullable=True),
    sa.Column('userAgent', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_activitylog_action'), 'activitylog', ['action'], unique=False)
    op.create_index(op.f('ix_activitylog_id'), 'activitylog', ['id'], unique=False)
    op.create_index(op.f('ix_activitylog_timestamp'), 'activitylog', ['timestamp'], unique=False)
    op.create_index(op.f('ix_activitylog_userId'), 'activitylog', ['userId'], unique=False)
    op.create_table('inappnotification',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('data', sa.JSON(), nullable=True),
    sa.Column('isRead', sa.Boolean(), nullable=True),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('readAt', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actionUrl', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_inappnotification_createdAt'), 'inappnotification', ['createdAt'], unique=False)
    op.create_index(op.f('ix_inappnotification_id'), 'inappnotification', ['id'], unique=False)
    op.create_index(op.f('ix_inappnotification_isRead'), 'inappnotification', ['isRead'], unique=False)
    op.create_index(op.f('ix_inappnotification_type'), 'inappnotification', ['type'], unique=False)
    op.create_index(op.f('ix_inappnotification_userId'), 'inappnotification', ['userId'], unique=False)
    op.create_table('pushsubscription',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('endpoint', sa.String(), nullable=False),
    sa.Column('p256dh', sa.String(), nullable=False),
    sa.Column('auth', sa.String(), nullable=False),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=True),
    sa.Column('userId', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_pushsubscription_endpoint'), 'pushsubscription', ['endpoint'], unique=True)
    op.create_index(op.f('ix_pushsubscription_id'), 'pushsubscription', ['id'], unique=False)
    op.create_index(op.f('ix_pushsubscription_userId'), 'pushsubscription', ['userId'], unique=False)
    op.create_table('report',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('branchId', sa.String(), nullable=False),
    sa.Column('writeOffs', sa.Float(), nullable=False),
    sa.Column('ninetyPlus', sa.Float(), nullable=False),
    sa.Column('reportType', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('submittedBy', sa.String(), nullable=False),
    sa.Column('comments', sa.String(), nullable=True),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=True),
    sa.Column('planReportId', sa.String(), nullable=True),
    sa.Column('submittedAt', sa.String(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.ForeignKeyConstraint(['branchId'], ['branch.id'], ),
    sa.ForeignKeyConstraint(['planReportId'], ['report.id'], ),
    sa.ForeignKeyConstraint(['submittedBy'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('date', 'branchId', 'reportType', name='uq_report_date_branch_type')
    )
    op.create_index(op.f('ix_report_branchId'), 'report', ['branchId'], unique=False)
    op.create_index(op.f('ix_report_date'), 'report', ['date'], unique=False)
    op.create_index(op.f('ix_report_id'), 'report', ['id'], unique=False)
    op.create_index(op.f('ix_report_planReportId'), 'report', ['planReportId'], unique=False)
    op.create_table('telegramlinkingcode',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('userId', sa.String(), nullable=False),
    sa.Column('expiresAt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_telegramlinkingcode_code'), 'telegramlinkingcode', ['code'], unique=True)
    op.create_index(op.f('ix_telegramlinkingcode_expiresAt'), 'telegramlinkingcode', ['expiresAt'], unique=False)
    op.create_index(op.f('ix_telegramlinkingcode_id'), 'telegramlinkingcode', ['id'], unique=False)
    op.create_index(op.f('ix_telegramlinkingcode_userId'), 'telegramlinkingcode', ['userId'], unique=False)
    op.create_table('telegramsubscription',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.String(), nullable=False),
    sa.Column('chatId', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_telegramsubscription_chatId'), 'telegramsubscription', ['chatId'], unique=True)
    op.create_index(op.f('ix_telegramsubscription_id'), 'telegramsubscription', ['id'], unique=False)
    op.create_index(op.f('ix_telegramsubscription_userId'), 'telegramsubscription', ['userId'], unique=True)
    op.create_table('useractivity',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.String(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('details', sa.JSON(), nullable=False),
    sa.Column('ipAddress', sa.String(), nullable=False),
    sa.Column('userAgent', sa.String(), nullable=False),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_useractivity_action'), 'useractivity', ['action'], unique=False)
    op.create_index(op.f('ix_useractivity_createdAt'), 'useractivity', ['createdAt'], unique=False)
    op.create_index(op.f('ix_useractivity_id'), 'useractivity', ['id'], unique=False)
    op.create_index(op.f('ix_useractivity_userId'), 'useractivity', ['userId'], unique=False)
    op.create_table('userbranchassignment',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.String(), nullable=False),
    sa.Column('branchId', sa.String(), nullable=False),
    sa.Column('isDefault', sa.Boolean(), nullable=True),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['branchId'], ['branch.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('userId', 'branchId', name='uq_user_branch_assignment')
    )
    op.create_index(op.f('ix_userbranchassignment_branchId'), 'userbranchassignment', ['branchId'], unique=False)
    op.create_index(op.f('ix_userbranchassignment_id'), 'userbranchassignment', ['id'], unique=False)
    op.create_index(op.f('ix_userbranchassignment_userId'), 'userbranchassignment', ['userId'], unique=False)
    op.create_table('userrole',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.String(), nullable=False),
    sa.Column('roleId', sa.String(), nullable=False),
    sa.Column('branchId', sa.String(), nullable=True),
    sa.Column('isDefault', sa.Boolean(), nullable=True),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['branchId'], ['branch.id'], ),
    sa.ForeignKeyConstraint(['roleId'], ['role.id'], ),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('userId', 'roleId', 'branchId', name='uq_user_role_branch')
    )
    op.create_index(op.f('ix_userrole_branchId'), 'userrole', ['branchId'], unique=False)
    op.create_index(op.f('ix_userrole_id'), 'userrole', ['id'], unique=False)
    op.create_index(op.f('ix_userrole_roleId'), 'userrole', ['roleId'], unique=False)
    op.create_index(op.f('ix_userrole_userId'), 'userrole', ['userId'], unique=False)
    op.create_table('notificationevent',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('notificationId', sa.String(), nullable=False),
    sa.Column('event', sa.String(), nullable=False),
    sa.Column('event_metadata', sa.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['notificationId'], ['inappnotification.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_notificationevent_event'), 'notificationevent', ['event'], unique=False)
    op.create_index(op.f('ix_notificationevent_id'), 'notificationevent', ['id'], unique=False)
    op.create_index(op.f('ix_notificationevent_notificationId'), 'notificationevent', ['notificationId'], unique=False)
    op.create_index(op.f('ix_notificationevent_timestamp'), 'notificationevent', ['timestamp'], unique=False)
    op.create_table('reportcomment',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('reportId', sa.String(), nullable=False),
    sa.Column('userId', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=True),
    sa.Column('parentId', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['parentId'], ['reportcomment.id'], ),
    sa.ForeignKeyConstraint(['reportId'], ['report.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reportcomment_id'), 'reportcomment', ['id'], unique=False)
    op.create_index(op.f('ix_reportcomment_parentId'), 'reportcomment', ['parentId'], unique=False)
    op.create_index(op.f('ix_reportcomment_reportId'), 'reportcomment', ['reportId'], unique=False)
    op.create_index(op.f('ix_reportcomment_userId'), 'reportcomment', ['userId'], unique=False)
    op.drop_table('ActivityLog')
    op.drop_table('User_Branches')
    op.drop_index('Branch_code_key', table_name='Branch')
    op.drop_table('Branch')
    op.drop_index('Role_name_key', table_name='Role')
    op.drop_table('Role')
    op.drop_index('Report_branchId_date_idx', table_name='Report')
    op.drop_index('Report_date_branchId_reportType_key', table_name='Report')
    op.drop_index('Report_date_status_idx', table_name='Report')
    op.drop_index('Report_planReportId_idx', table_name='Report')
    op.drop_table('Report')
    op.drop_index('User_branchId_idx', table_name='User')
    op.drop_index('User_email_key', table_name='User')
    op.drop_index('User_username_key', table_name='User')
    op.drop_table('User')
    op.drop_table('Roles')
    op.drop_index('UserRole_userId_idx', table_name='UserRole')
    op.drop_index('UserRole_userId_roleId_branchId_key', table_name='UserRole')
    op.drop_table('UserRole')
    op.drop_table('_prisma_migrations')
    op.drop_index('UserBranchAssignment_userId_branchId_key', table_name='UserBranchAssignment')
    op.drop_index('UserBranchAssignment_userId_idx', table_name='UserBranchAssignment')
    op.drop_table('UserBranchAssignment')
    op.drop_index('PushSubscription_endpoint_idx', table_name='PushSubscription')
    op.drop_index('PushSubscription_endpoint_key', table_name='PushSubscription')
    op.drop_index('PushSubscription_userId_idx', table_name='PushSubscription')
    op.drop_table('PushSubscription')
    op.drop_table('Report_Comments')
    op.drop_index('InAppNotification_createdAt_idx', table_name='InAppNotification')
    op.drop_index('InAppNotification_isRead_idx', table_name='InAppNotification')
    op.drop_index('InAppNotification_type_idx', table_name='InAppNotification')
    op.drop_index('InAppNotification_userId_idx', table_name='InAppNotification')
    op.drop_table('InAppNotification')
    op.drop_index('OrganizationSettings_organizationId_key', table_name='OrganizationSettings')
    op.drop_table('OrganizationSettings')
    op.drop_table('Branches')
    op.drop_table('Permissions')
    op.drop_index('users_email', table_name='Users')
    op.drop_index('users_username', table_name='Users')
    op.drop_table('Users')
    op.drop_index('NotificationEvent_event_idx', table_name='NotificationEvent')
    op.drop_index('NotificationEvent_notificationId_idx', table_name='NotificationEvent')
    op.drop_index('NotificationEvent_timestamp_idx', table_name='NotificationEvent')
    op.drop_table('NotificationEvent')
    op.drop_table('Role_Permissions')
    op.drop_index('TelegramLinkingCode_code_key', table_name='TelegramLinkingCode')
    op.drop_index('TelegramLinkingCode_expiresAt_idx', table_name='TelegramLinkingCode')
    op.drop_index('TelegramLinkingCode_userId_idx', table_name='TelegramLinkingCode')
    op.drop_table('TelegramLinkingCode')
    op.drop_index('UserActivity_action_idx', table_name='UserActivity')
    op.drop_index('UserActivity_createdAt_idx', table_name='UserActivity')
    op.drop_index('UserActivity_userId_idx', table_name='UserActivity')
    op.drop_table('UserActivity')
    op.drop_index('notifications_user_id', table_name='Notifications')
    op.drop_table('Notifications')
    op.drop_index('TelegramSubscription_chatId_key', table_name='TelegramSubscription')
    op.drop_index('TelegramSubscription_userId_idx', table_name='TelegramSubscription')
    op.drop_index('TelegramSubscription_userId_key', table_name='TelegramSubscription')
    op.drop_table('TelegramSubscription')
    op.drop_index('ReportComment_parentId_idx', table_name='ReportComment')
    op.drop_index('ReportComment_reportId_idx', table_name='ReportComment')
    op.drop_index('ReportComment_userId_idx', table_name='ReportComment')
    op.drop_table('ReportComment')
    op.drop_index('reports_branch_id', table_name='Reports')
    op.drop_index('reports_user_id', table_name='Reports')
    op.drop_table('Reports')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Reports',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Reports_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('branch_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('plan', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('actual', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['Branches.id'], name='Reports_branch_id_fkey', onupdate='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name='Reports_user_id_fkey', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Reports_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('reports_user_id', 'Reports', ['user_id'], unique=False)
    op.create_index('reports_branch_id', 'Reports', ['branch_id'], unique=False)
    op.create_table('ReportComment',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reportId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('parentId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parentId'], ['ReportComment.id'], name='ReportComment_parentId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['reportId'], ['Report.id'], name='ReportComment_reportId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='ReportComment_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ReportComment_pkey')
    )
    op.create_index('ReportComment_userId_idx', 'ReportComment', ['userId'], unique=False)
    op.create_index('ReportComment_reportId_idx', 'ReportComment', ['reportId'], unique=False)
    op.create_index('ReportComment_parentId_idx', 'ReportComment', ['parentId'], unique=False)
    op.create_table('TelegramSubscription',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('chatId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='TelegramSubscription_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='TelegramSubscription_pkey')
    )
    op.create_index('TelegramSubscription_userId_key', 'TelegramSubscription', ['userId'], unique=True)
    op.create_index('TelegramSubscription_userId_idx', 'TelegramSubscription', ['userId'], unique=False)
    op.create_index('TelegramSubscription_chatId_key', 'TelegramSubscription', ['chatId'], unique=True)
    op.create_table('Notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name='Notifications_user_id_fkey', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Notifications_pkey')
    )
    op.create_index('notifications_user_id', 'Notifications', ['user_id'], unique=False)
    op.create_table('UserActivity',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userAgent', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='UserActivity_userId_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='UserActivity_pkey')
    )
    op.create_index('UserActivity_userId_idx', 'UserActivity', ['userId'], unique=False)
    op.create_index('UserActivity_createdAt_idx', 'UserActivity', ['createdAt'], unique=False)
    op.create_index('UserActivity_action_idx', 'UserActivity', ['action'], unique=False)
    op.create_table('TelegramLinkingCode',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='TelegramLinkingCode_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='TelegramLinkingCode_pkey')
    )
    op.create_index('TelegramLinkingCode_userId_idx', 'TelegramLinkingCode', ['userId'], unique=False)
    op.create_index('TelegramLinkingCode_expiresAt_idx', 'TelegramLinkingCode', ['expiresAt'], unique=False)
    op.create_index('TelegramLinkingCode_code_key', 'TelegramLinkingCode', ['code'], unique=True)
    op.create_table('Role_Permissions',
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['Permissions.id'], name='Role_Permissions_permission_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['Roles.id'], name='Role_Permissions_role_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'permission_id', name='Role_Permissions_pkey')
    )
    op.create_table('NotificationEvent',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('notificationId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('event', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['notificationId'], ['InAppNotification.id'], name='NotificationEvent_notificationId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='NotificationEvent_pkey')
    )
    op.create_index('NotificationEvent_timestamp_idx', 'NotificationEvent', ['timestamp'], unique=False)
    op.create_index('NotificationEvent_notificationId_idx', 'NotificationEvent', ['notificationId'], unique=False)
    op.create_index('NotificationEvent_event_idx', 'NotificationEvent', ['event'], unique=False)
    op.create_table('Users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Users_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('refresh_token', sa.VARCHAR(length=512), autoincrement=False, nullable=True),
    sa.Column('refresh_token_expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['Roles.id'], name='Users_role_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='Users_pkey'),
    sa.UniqueConstraint('email', name='Users_email_key'),
    sa.UniqueConstraint('username', name='Users_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('users_username', 'Users', ['username'], unique=True)
    op.create_index('users_email', 'Users', ['email'], unique=True)
    op.create_table('Permissions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Permissions_pkey'),
    sa.UniqueConstraint('name', name='Permissions_name_key')
    )
    op.create_table('Branches',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Branches_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['Branches.id'], name='Branches_parent_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='Branches_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('OrganizationSettings',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('organizationId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('validationRules', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text('\'{"comments": {"required": true, "minLength": 10}, "writeOffs": {"maxAmount": 1000, "requireApproval": true}, "ninetyPlus": {"maxAmount": 5000, "requireApproval": true}, "duplicateCheck": {"enabled": true}}\'::jsonb'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='OrganizationSettings_pkey')
    )
    op.create_index('OrganizationSettings_organizationId_key', 'OrganizationSettings', ['organizationId'], unique=True)
    op.create_table('InAppNotification',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('isRead', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('readAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('actionUrl', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='InAppNotification_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='InAppNotification_pkey')
    )
    op.create_index('InAppNotification_userId_idx', 'InAppNotification', ['userId'], unique=False)
    op.create_index('InAppNotification_type_idx', 'InAppNotification', ['type'], unique=False)
    op.create_index('InAppNotification_isRead_idx', 'InAppNotification', ['isRead'], unique=False)
    op.create_index('InAppNotification_createdAt_idx', 'InAppNotification', ['createdAt'], unique=False)
    op.create_table('Report_Comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('report_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['Report_Comments.id'], name='Report_Comments_parent_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['report_id'], ['Reports.id'], name='Report_Comments_report_id_fkey', onupdate='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name='Report_Comments_user_id_fkey', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Report_Comments_pkey')
    )
    op.create_table('PushSubscription',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('p256dh', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('auth', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='PushSubscription_userId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='PushSubscription_pkey')
    )
    op.create_index('PushSubscription_userId_idx', 'PushSubscription', ['userId'], unique=False)
    op.create_index('PushSubscription_endpoint_key', 'PushSubscription', ['endpoint'], unique=True)
    op.create_index('PushSubscription_endpoint_idx', 'PushSubscription', ['endpoint'], unique=False)
    op.create_table('UserBranchAssignment',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('branchId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('isDefault', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['branchId'], ['Branch.id'], name='UserBranchAssignment_branchId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='UserBranchAssignment_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='UserBranchAssignment_pkey')
    )
    op.create_index('UserBranchAssignment_userId_idx', 'UserBranchAssignment', ['userId'], unique=False)
    op.create_index('UserBranchAssignment_userId_branchId_key', 'UserBranchAssignment', ['userId', 'branchId'], unique=True)
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='_prisma_migrations_pkey')
    )
    op.create_table('UserRole',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('roleId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('branchId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isDefault', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['branchId'], ['Branch.id'], name='UserRole_branchId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['roleId'], ['Role.id'], name='UserRole_roleId_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='UserRole_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='UserRole_pkey')
    )
    op.create_index('UserRole_userId_roleId_branchId_key', 'UserRole', ['userId', 'roleId', 'branchId'], unique=True)
    op.create_index('UserRole_userId_idx', 'UserRole', ['userId'], unique=False)
    op.create_table('Roles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Roles_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Roles_pkey'),
    sa.UniqueConstraint('name', name='Roles_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('User',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('password', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.TEXT(), server_default=sa.text("'user'::text"), autoincrement=False, nullable=False),
    sa.Column('branchId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastLogin', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('failedLoginAttempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('lockedUntil', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['branchId'], ['Branch.id'], name='User_branchId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='User_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('User_username_key', 'User', ['username'], unique=True)
    op.create_index('User_email_key', 'User', ['email'], unique=True)
    op.create_index('User_branchId_idx', 'User', ['branchId'], unique=False)
    op.create_table('Report',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('branchId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('writeOffs', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('ninetyPlus', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('reportType', sa.TEXT(), server_default=sa.text("'actual'::text"), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=False),
    sa.Column('submittedBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('planReportId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('submittedAt', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('commentArray', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['branchId'], ['Branch.id'], name='Report_branchId_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['planReportId'], ['Report.id'], name='Report_planReportId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='Report_pkey')
    )
    op.create_index('Report_planReportId_idx', 'Report', ['planReportId'], unique=False)
    op.create_index('Report_date_status_idx', 'Report', ['date', 'status'], unique=False)
    op.create_index('Report_date_branchId_reportType_key', 'Report', ['date', 'branchId', 'reportType'], unique=True)
    op.create_index('Report_branchId_date_idx', 'Report', ['branchId', 'date'], unique=False)
    op.create_table('Role',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Role_pkey')
    )
    op.create_index('Role_name_key', 'Role', ['name'], unique=True)
    op.create_table('Branch',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('parentId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parentId'], ['Branch.id'], name='Branch_parentId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='Branch_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('Branch_code_key', 'Branch', ['code'], unique=True)
    op.create_table('User_Branches',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('branch_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['Branches.id'], name='User_Branches_branch_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name='User_Branches_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'branch_id', name='User_Branches_pkey')
    )
    op.create_table('ActivityLog',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('userAgent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='ActivityLog_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ActivityLog_pkey')
    )
    op.drop_index(op.f('ix_reportcomment_userId'), table_name='reportcomment')
    op.drop_index(op.f('ix_reportcomment_reportId'), table_name='reportcomment')
    op.drop_index(op.f('ix_reportcomment_parentId'), table_name='reportcomment')
    op.drop_index(op.f('ix_reportcomment_id'), table_name='reportcomment')
    op.drop_table('reportcomment')
    op.drop_index(op.f('ix_notificationevent_timestamp'), table_name='notificationevent')
    op.drop_index(op.f('ix_notificationevent_notificationId'), table_name='notificationevent')
    op.drop_index(op.f('ix_notificationevent_id'), table_name='notificationevent')
    op.drop_index(op.f('ix_notificationevent_event'), table_name='notificationevent')
    op.drop_table('notificationevent')
    op.drop_index(op.f('ix_userrole_userId'), table_name='userrole')
    op.drop_index(op.f('ix_userrole_roleId'), table_name='userrole')
    op.drop_index(op.f('ix_userrole_id'), table_name='userrole')
    op.drop_index(op.f('ix_userrole_branchId'), table_name='userrole')
    op.drop_table('userrole')
    op.drop_index(op.f('ix_userbranchassignment_userId'), table_name='userbranchassignment')
    op.drop_index(op.f('ix_userbranchassignment_id'), table_name='userbranchassignment')
    op.drop_index(op.f('ix_userbranchassignment_branchId'), table_name='userbranchassignment')
    op.drop_table('userbranchassignment')
    op.drop_index(op.f('ix_useractivity_userId'), table_name='useractivity')
    op.drop_index(op.f('ix_useractivity_id'), table_name='useractivity')
    op.drop_index(op.f('ix_useractivity_createdAt'), table_name='useractivity')
    op.drop_index(op.f('ix_useractivity_action'), table_name='useractivity')
    op.drop_table('useractivity')
    op.drop_index(op.f('ix_telegramsubscription_userId'), table_name='telegramsubscription')
    op.drop_index(op.f('ix_telegramsubscription_id'), table_name='telegramsubscription')
    op.drop_index(op.f('ix_telegramsubscription_chatId'), table_name='telegramsubscription')
    op.drop_table('telegramsubscription')
    op.drop_index(op.f('ix_telegramlinkingcode_userId'), table_name='telegramlinkingcode')
    op.drop_index(op.f('ix_telegramlinkingcode_id'), table_name='telegramlinkingcode')
    op.drop_index(op.f('ix_telegramlinkingcode_expiresAt'), table_name='telegramlinkingcode')
    op.drop_index(op.f('ix_telegramlinkingcode_code'), table_name='telegramlinkingcode')
    op.drop_table('telegramlinkingcode')
    op.drop_index(op.f('ix_report_planReportId'), table_name='report')
    op.drop_index(op.f('ix_report_id'), table_name='report')
    op.drop_index(op.f('ix_report_date'), table_name='report')
    op.drop_index(op.f('ix_report_branchId'), table_name='report')
    op.drop_table('report')
    op.drop_index(op.f('ix_pushsubscription_userId'), table_name='pushsubscription')
    op.drop_index(op.f('ix_pushsubscription_id'), table_name='pushsubscription')
    op.drop_index(op.f('ix_pushsubscription_endpoint'), table_name='pushsubscription')
    op.drop_table('pushsubscription')
    op.drop_index(op.f('ix_inappnotification_userId'), table_name='inappnotification')
    op.drop_index(op.f('ix_inappnotification_type'), table_name='inappnotification')
    op.drop_index(op.f('ix_inappnotification_isRead'), table_name='inappnotification')
    op.drop_index(op.f('ix_inappnotification_id'), table_name='inappnotification')
    op.drop_index(op.f('ix_inappnotification_createdAt'), table_name='inappnotification')
    op.drop_table('inappnotification')
    op.drop_index(op.f('ix_activitylog_userId'), table_name='activitylog')
    op.drop_index(op.f('ix_activitylog_timestamp'), table_name='activitylog')
    op.drop_index(op.f('ix_activitylog_id'), table_name='activitylog')
    op.drop_index(op.f('ix_activitylog_action'), table_name='activitylog')
    op.drop_table('activitylog')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_index(op.f('ix_user_branchId'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_role_name'), table_name='role')
    op.drop_index(op.f('ix_role_id'), table_name='role')
    op.drop_table('role')
    op.drop_index(op.f('ix_organizationsettings_organizationId'), table_name='organizationsettings')
    op.drop_index(op.f('ix_organizationsettings_id'), table_name='organizationsettings')
    op.drop_table('organizationsettings')
    op.drop_index(op.f('ix_branch_id'), table_name='branch')
    op.drop_index(op.f('ix_branch_code'), table_name='branch')
    op.drop_table('branch')
    # ### end Alembic commands ###

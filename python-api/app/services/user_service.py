from sqlalchemy.orm import Session
from typing import Optional, Any, Dict, Union
from datetime import datetime, timedelta, timezone
from jose import jwt, JWTError
import uuid
import logging

from app.core.security import get_password_hash, verify_password
from app.db.models import User # Using __init__.py for model imports
from app.schemas import UserCreate, UserUpdate # Using __init__.py for schema imports
from app.core.config import settings  # Import settings for JWT config

async def get_user_by_id(db: Session, user_id: str) -> Optional[User]:
    return db.query(User).filter(User.id == user_id).first()

async def get_user_by_email(db: Session, email: str) -> Optional[User]:
    return db.query(User).filter(User.email == email).first()

async def get_user_by_username(db: Session, username: str) -> Optional[User]:
    return db.query(User).filter(User.username == username).first()

async def create_user(db: Session, *, user_in: UserCreate) -> User:
    # In a real app, you'd generate a CUID for the ID if not provided by DB
    # For now, assuming ID is handled or will be added
    db_user = User(
        # id=generate_cuid(), # Example if you generate CUIDs in Python
        email=user_in.email,
        username=user_in.username,
        name=user_in.name,
        password=get_password_hash(user_in.password), # Corrected field name to 'password'
        role=user_in.role or "user", # Ensure role has a default
        isActive=user_in.isActive,
        branchId=user_in.branchId,
        image=user_in.image,
        # preferences will be set if provided in UserCreate, else None
    )
    # If UserCreate schema has 'id' and it's optional, handle it here
    # For example, if using UUIDs: db_user.id = str(uuid.uuid4())
    # If using CUIDs and they are generated by the application:
    # from cuid import cuid
    # db_user.id = cuid()

    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

async def update_user(
    db: Session, *, db_user: User, user_in: Union[UserUpdate, Dict[str, Any]]
) -> User:
    if isinstance(user_in, dict):
        update_data = user_in
    else:
        update_data = user_in.model_dump(exclude_unset=True)

    if "password" in update_data and update_data["password"]:
        # This means a new password is being set during an update
        new_hashed_password = get_password_hash(update_data["password"])
        update_data["password"] = new_hashed_password # Update the 'password' field with the new hash
    # elif "password" in update_data and not update_data["password"]:
        # If password field is present but empty/None, explicitly remove it to avoid issues
        # del update_data["password"]


    for field, value in update_data.items():
        setattr(db_user, field, value)

    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

async def authenticate_user(
    db: Session, *, username_or_email: str, password: str
) -> Optional[User]:
    user = await get_user_by_username(db, username=username_or_email)
    if not user:
        user = await get_user_by_email(db, email=username_or_email)

    if not user:
        return None
    if not user.isActive: # Check if user is active
        return None # Or raise an exception for inactive user
    if not verify_password(password, user.password): # 'password' field in User model stores hashed_password
        return None

    # Update last login time
    user.lastLogin = datetime.now(timezone.utc)
    db.add(user)
    db.commit()
    return user

def create_access_token(user_id: str, expires_delta: Optional[timedelta] = None) -> str:
    """
    Create a JWT access token for the user
    """
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(
            minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES
        )

    to_encode = {"exp": expire, "sub": str(user_id)}
    encoded_jwt = jwt.encode(
        to_encode, settings.SECRET_KEY, algorithm=settings.JWT_ALGORITHM
    )
    return encoded_jwt

def create_refresh_token(user_id: str, expires_delta: Optional[timedelta] = None) -> str:
    """
    Create a JWT refresh token for the user
    """
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(
            days=settings.REFRESH_TOKEN_EXPIRE_DAYS
        )

    to_encode = {"exp": expire, "sub": str(user_id), "type": "refresh"}
    encoded_jwt = jwt.encode(
        to_encode, settings.SECRET_KEY, algorithm=settings.JWT_ALGORITHM
    )
    return encoded_jwt

async def store_refresh_token(db: Session, user_id: str, refresh_token: str) -> None:
    """
    Store the refresh token in the database for tracking and revocation purposes
    """
    from app.db.models import RefreshToken

    logger = logging.getLogger(__name__)

    try:
        # Check if there's already a token for this user and replace it
        existing_token = db.query(RefreshToken).filter(RefreshToken.userId == user_id).first()
        expires_at = datetime.now(timezone.utc) + timedelta(days=settings.REFRESH_TOKEN_EXPIRE_DAYS)

        if existing_token:
            existing_token.token = refresh_token
            existing_token.expiresAt = expires_at
            existing_token.isRevoked = False
            db.add(existing_token)
        else:
            # Create a new refresh token record
            token_record = RefreshToken(
                id=str(uuid.uuid4()),
                userId=user_id,
                token=refresh_token,
                expiresAt=expires_at
            )
            db.add(token_record)

        db.commit()
    except Exception as e:
        db.rollback()
        # Log the error but don't stop the authentication flow
        logger.error(f"Error storing refresh token: {e}")
        # Don't re-raise the exception - this allows auth to work even if storage fails

def is_active(user: User) -> bool:
    return user.isActive

def is_superuser(user: User) -> bool:
    # This depends on how you define superuser (e.g., by role name)
    return user.role == "admin" # Example: role 'admin' is superuser

async def validate_refresh_token(db: Session, user_id: str, token: str) -> bool:
    """
    Validate that a refresh token exists in the database and is not revoked
    """
    from app.db.models import RefreshToken

    token_record = db.query(RefreshToken).filter(
        RefreshToken.userId == user_id,
        RefreshToken.token == token,
        RefreshToken.isRevoked == False,
        RefreshToken.expiresAt > datetime.now(timezone.utc)
    ).first()

    return token_record is not None

async def invalidate_all_refresh_tokens(db: Session, user_id: str) -> None:
    """
    Invalidate all refresh tokens for a user
    """
    from app.db.models import RefreshToken

    db.query(RefreshToken).filter(
        RefreshToken.userId == user_id
    ).update({"isRevoked": True})

    db.commit()

async def update_last_activity(db: Session, user_id: str) -> None:
    """
    Update the last activity timestamp for a user
    """
    user = await get_user_by_id(db, user_id)
    if user:
        user.lastActivity = datetime.now(timezone.utc)
        db.add(user)
        db.commit()

async def create_password_reset_token(db: Session, user) -> str:
    """
    Create a password reset token for a user
    """
    # Generate a token that expires in 24 hours
    expires = datetime.now(timezone.utc) + timedelta(hours=24)
    token_data = {
        "sub": str(user.id),
        "exp": expires,
        "type": "password-reset"
    }

    reset_token = jwt.encode(
        token_data,
        settings.SECRET_KEY,
        algorithm=settings.JWT_ALGORITHM
    )

    # Store the token hash in the database if you want to track it
    # For now, we'll just return the token
    return reset_token

async def reset_password(db: Session, token: str, new_password: str) -> bool:
    """
    Reset a user's password using a reset token
    """
    try:
        # Verify the token
        payload = jwt.decode(
            token,
            settings.SECRET_KEY,
            algorithms=[settings.JWT_ALGORITHM]
        )

        # Check token type
        if payload.get("type") != "password-reset":
            return False

        user_id = payload.get("sub")
        if not user_id:
            return False

        # Get the user
        user = await get_user_by_id(db, user_id)
        if not user:
            return False

        # Update the password
        user.password = get_password_hash(new_password)
        db.add(user)
        db.commit()

        return True
    except JWTError:
        return False

# Placeholder for CUID generation if not handled by DB or other means
# def generate_cuid():
#     from cuid import cuid
#     return cuid()

from sqlalchemy.orm import Session
from typing import Optional, Any, Dict, Union

from app.core.security import get_password_hash, verify_password
from app.db.models import User # Using __init__.py for model imports
from app.schemas import UserCreate, UserUpdate # Using __init__.py for schema imports

async def get_user_by_id(db: Session, user_id: str) -> Optional[User]:
    return db.query(User).filter(User.id == user_id).first()

async def get_user_by_email(db: Session, email: str) -> Optional[User]:
    return db.query(User).filter(User.email == email).first()

async def get_user_by_username(db: Session, username: str) -> Optional[User]:
    return db.query(User).filter(User.username == username).first()

async def create_user(db: Session, *, user_in: UserCreate) -> User:
    # In a real app, you'd generate a CUID for the ID if not provided by DB
    # For now, assuming ID is handled or will be added
    db_user = User(
        # id=generate_cuid(), # Example if you generate CUIDs in Python
        email=user_in.email,
        username=user_in.username,
        name=user_in.name,
        password=get_password_hash(user_in.password), # Corrected field name to 'password'
        role=user_in.role or "user", # Ensure role has a default
        isActive=user_in.isActive,
        branchId=user_in.branchId,
        image=user_in.image,
        # preferences will be set if provided in UserCreate, else None
    )
    # If UserCreate schema has 'id' and it's optional, handle it here
    # For example, if using UUIDs: db_user.id = str(uuid.uuid4())
    # If using CUIDs and they are generated by the application:
    # from cuid import cuid
    # db_user.id = cuid()

    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

async def update_user(
    db: Session, *, db_user: User, user_in: Union[UserUpdate, Dict[str, Any]]
) -> User:
    if isinstance(user_in, dict):
        update_data = user_in
    else:
        update_data = user_in.dict(exclude_unset=True)

    if "password" in update_data and update_data["password"]:
        # This means a new password is being set during an update
        new_hashed_password = get_password_hash(update_data["password"])
        update_data["password"] = new_hashed_password # Update the 'password' field with the new hash
    # elif "password" in update_data and not update_data["password"]:
        # If password field is present but empty/None, explicitly remove it to avoid issues
        # del update_data["password"]


    for field, value in update_data.items():
        setattr(db_user, field, value)

    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

async def authenticate_user(
    db: Session, *, username_or_email: str, password: str
) -> Optional[User]:
    user = await get_user_by_username(db, username=username_or_email)
    if not user:
        user = await get_user_by_email(db, email=username_or_email)
    
    if not user:
        return None
    if not user.isActive: # Check if user is active
        return None # Or raise an exception for inactive user
    if not verify_password(password, user.password): # 'password' field in User model stores hashed_password
        return None
    return user

def is_active(user: User) -> bool:
    return user.isActive

def is_superuser(user: User) -> bool:
    # This depends on how you define superuser (e.g., by role name)
    return user.role == "admin" # Example: role 'admin' is superuser

# Placeholder for CUID generation if not handled by DB or other means
# def generate_cuid():
#     from cuid import cuid
#     return cuid()
